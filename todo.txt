add more checks to arg parsing

ensure net1 < net2 in size

start thinking about how to combine alignments from the Pareto front
to create local ones. Should try to take from the best representatives of
the whole front-- might want to look at distance in alignment space as well
as objective space to do so.

add logging of mean and max over time for plotting purposes

make sure asserts are turned off in optimized version

consider adding archive

consider self-adaptive mutation probabilities

write tests for v1Unaligned being correct after all modifying ops.

consider abandoning size optimization if total alignment optimization
performance continues to be much better. Instead, might want to do partiality
as a post-processing step of extracting high-confidence sub-alignments.

try ACO. 

add the ability to specify a list of fitnesses to dominate as a stopping condition.
Maybe go another 10000 generations after dominating the last one.

add seed-and-extend with random restart

add an alternative crowding distance calculator that uses alignment space distances

add the ability to load all alignments in a given directory as the initial population.
Just do a non-dominated sort on them after loading them, then take popsize many of them
as the first population.

try getting rid of edge set in Network class. Not really used anymore, except in slow ICS, which
is used to initialize conserved count.

steadystate gets excellent diversity with proportional searching, but slows convergence a lot.
Try picking objective randomly and always setting proportion to one. Then randomize how much
time to do proportional search vs. non-decreasing hillclimb.

track what % of alns created are non-dominated upon creation. Good performance metric.

REFACTORING
-----------
clean up the Makefile. Currently hideous.

LOCAL SEARCH ALONE
------------------

 Can get ICS up to .92 while EC is just .33! ICS appears to thus be misleading.
 Switching to S3, but need to think more about these topological fitness functions.

SEEDING
-------
After seeding, the GA portion of the program appears to go much more slowly than otherwise, although the diversity of the results is much better. It could be that the hillclimbers all found their own hills and the space between them is completely flat, so combining them isn't helping much. Unfortunately, though, it seems bitscore sum is not increasing much either, even though we are also seeding with a greedy matching based on bitscore.